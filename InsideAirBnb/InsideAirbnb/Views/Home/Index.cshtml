@model InsideAirbnb.Models.ViewModels.HomeViewModel
@{
    ViewData["Title"] = "Home Page";
}
<div class="text-center">
    <h1 class="display-4">Welcome</h1>
    <p>Learn about <a href="https://docs.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>
</div>
<div class="map-container" style="height: 100vh">
    <div id='map' style="height:100%;width: 80%; float: left"></div>
    <fieldset>
        <input id='feature_filter' type='text' placeholder='asdasd' value="179" />
    </fieldset>
    <div id='feature-listing' class='listing'></div>
    <nav id='filter-group' class='filter-group'></nav>
    <div class="map-sidebar" style="float: right">
        <div class="sidebar_header">
            <div class="header_left">
                <h3 id="filter_value">Amsterdam</h3>
                <label for="map_filter">Filter by:</label><br />
                <select id="map_filter">
                    <option value="Amsterdam">Amsterdam</option>
                    <optgroup label="neighbourhood">
                        @foreach (var item in Model.neighbourhoods)
                        {
                            <option value="@item.Neighbourhood">@item.Neighbourhood</option>
                        }
                    </optgroup>
                    <optgroup label="Price">
                        <option value="Amsterdam">LOAD ALL PRICES</option>
                    </optgroup>
                    <optgroup label="Reviews">
                        <option value="Amsterdam">LOAD ALL REVIEWS</option>
                    </optgroup>
                </select>
            </div>
            <div class="header_right">
                <h3 id="number_listings_loaded">#NUMBER LISTINGS LOADED</h3>
            </div>
        </div>
    </div>
</div>
<script>
    document.addEventListener('DOMContentLoaded', function() {
            mapboxgl.accessToken = 'pk.eyJ1Ijoid2ludGVyY29tbyIsImEiOiJjanZncnFjdTIwYTJwM3ltajlmODQ0bWlpIn0.LbLEHOHfmrzlq6D5kLd1yQ';
        var map = new mapboxgl.Map({
            container: 'map',
            style: 'mapbox://styles/mapbox/light-v10',
            center: [4.888740, 52.381650],
            zoom: 3
        });
        let popup = new mapboxgl.Popup({ closeOnClick: false });
            let clicked = false;
            popup.on("close", () => {
                clicked = false;
            });
        const generatePopUp = (e) => {
            let listingAmmout = e.features[0].properties.calculated_host_listings_count;
            let listing_ammount = "";
            if (listingAmmout - 1 <= 0) {
                listing_ammount = "No listings known"
            } else {
                listing_ammount = e.features[0].properties.calculated_host_listings_count + " other listings known";
            }
            popup.setLngLat(e.lngLat)
                .setHTML("<div class='pup_up'> " +
                    "<b>" + e.features[0].properties.host_name + "</b> <br>" +
                    "<sub>(" + listing_ammount + ")</sub> " +
                    "<hr> <p id='listing_id'>" + e.features[0].properties.id + "</p> " +
                    "<p id='listingNameContainer' > " + e.features[0].properties.name + "</p> " +
                    "<p id='neigbourhood'>" + e.features[0].properties.neighbourhood + "</p> " +
                    "<p id='room_type' > " + e.features[0].properties.room_type + "</p> <hr> " +
                    "<div class='income_section>'<p id='income'>&euro;INSERT EXPECTED INCOME</p> " +
                    "<div class='listingSectionSubhead'><p id='location_price'>&euro;" + e.features[0].properties.price + "/night <br></p>" +
                    "<p id='minimun_nights'>" + e.features[0].properties.minimum_nights + " nights minimum</p></div></div> " +
                    "<br> <p id='nights_per_year'>(INSERT) nights per year (est.)</p> " +
                    "<div class='listingSectionSubhead'><p id='occupancy_rate'>(INSERT) occupancy rate (est.)</p> " +
                    "<p id='reviews_per_month'>" + e.features[0].properties.reviews_per_month + " reviews per month</p> " +
                    "<p id='number_of_reviews'>" + e.features[0].properties.number_of_reviews + " reviews</p> " +
                    "<p id='last_review'> last " + e.features[0].properties.last_review + " <br></p></div> " +
                    "<p id='availability'>(INSERT) availability</p> " +
                    "<sub id='availability_365'>" + e.features[0].properties.availability_365 + "days/year(PERCENTAGE%)</sub>  <br>" +
                    "<sub>click listing on map to 'pin' details</sub> " +
                    "</div > ")
                    .addTo(map);
        };
        document.getElementById("map_filter").addEventListener("change", () => {
            document.getElementById("filter_value").innerText = document.getElementById("map_filter").value
            var label = $('#map_filter :selected').parent().attr('label');
            map.setFilter('locations_layer', ["==", label, document.getElementById("map_filter").value]);
            });
        map.on('load', function () {
            map.addLayer({
                "id": "locations_layer",
                "type": "circle",
                "source": {
                    "type": "geojson",
                    "data": {
                        'type': 'FeatureCollection',
                        'features': [
                            @{ 
                                var geo = "";
                                Model.listings.Take(2000).ToList().ForEach(item =>
                                {
                                    geo += @"{
                                        'type': 'Feature',
                                        'geometry': {
                                        'type': 'Point',
                                        'coordinates': [" + Html.Raw(item.Longitude.ToString().Insert(1, ".")) + ", " + Html.Raw(item.Latitude.ToString().Insert(2, ".")) + @"]
                                        },
                                        'properties': {
                                        'host_name': '" + Html.Raw(item.HostName) + @"',
                                        'id': '" + Html.Raw(item.Id) + @"',
                                        'calculated_host_listings_count' : '" + Html.Raw(item.CalculatedHostListingsCount) + @"',
                                        'name' : 'Name Bugged',
                                        'neighbourhood' : '" + Html.Raw(item.Neighbourhood) + @"',
                                        'room_type' : '" + Html.Raw(item.RoomType) + @"',
                                        'price' : '" + Html.Raw(item.Price) + @"',
                                        'minimum_nights' : '" + Html.Raw(item.MinimumNights) + @"',
                                        'reviews_per_month' : '" + Html.Raw(item.ReviewsPerMonth) + @"',
                                        'number_of_reviews' : '" + Html.Raw(item.NumberOfReviews) + @"',
                                        'last_review' : '" + Html.Raw(item.LastReview) + @"',
                                        'availability_365' : '" + Html.Raw(item.Availability365) + @"',
                                    }},";
                                });
                             }
                            @Html.Raw(geo)
                        ],
                    },
                },
                'paint': {
                    // color circles by ethnicity, using a match expression
                    // https://docs.mapbox.com/mapbox-gl-js/style-spec/#expressions-match
                    'circle-color': [
                        'match',
                        ['get', 'room_type'],
                        'Entire home/apt', '#fbb03b',
                        'Private room', '#223b53',
                        'Shared room', '#e55e5e',
            /* other */ '#ccc'
                    ]
                }
            });
            map.on('click', 'locations_layer', function (e) {
                clicked = !clicked;
                generatePopUp(e);
            });
            map.on('mouseenter', 'locations_layer', function (e) {
                map.getCanvas().style.cursor = 'pointer';
                if (!clicked) {
                    generatePopUp(e);
                }
            });

            // Change it back to a pointer when it leaves.
            map.on('mouseleave', 'locations_layer', function (e) {
                map.getCanvas().style.cursor = '';
                if (!clicked) {
                    popup.remove();
                }
            });
        });
    }, false);
</script>
